import time
from pydantic import BaseModel, HttpUrl, Field
from typing import List, Optional, Union, Literal


class GenerationParams(BaseModel):
    """Defines parameters for LLM text generation."""

    temperature: float = 0.7
    max_tokens: int = 250


class ClientConfig(BaseModel):
    """Configuration settings for the LLM chat client."""

    service_url: HttpUrl = "http://localhost:8000/v1/chat/completions"
    request_timeout: int = 120
    generation_params: GenerationParams = GenerationParams()  # Use defaults
    client_log_level: str = "INFO"
    default_system_prompt: Optional[str] = None


class ChatMessageInput(BaseModel):
    """Represents a single message in a chat conversation input."""

    role: Literal["system", "user", "assistant"]
    content: str


class ChatCompletionRequest(BaseModel):
    """Defines the request payload for the chat completions endpoint."""

    messages: List[ChatMessageInput]
    model: Optional[str] = None
    temperature: Optional[float] = Field(default=0.7, ge=0.0, le=2.0)
    max_tokens: Optional[int] = Field(default=512)
    top_p: Optional[float] = Field(default=1.0, ge=0.0, le=1.0)
    stop: Optional[Union[str, List[str]]] = Field(default=None)


class ChatMessageOutput(BaseModel):
    """Represents a single message output from the assistant."""

    role: Literal["assistant"]
    content: str


class ChatCompletionChoice(BaseModel):
    """Represents one of the completion choices generated by the LLM."""

    index: int
    message: ChatMessageOutput
    finish_reason: Optional[str] = None  # e.g., "stop", "length"


class ChatCompletionResponse(BaseModel):
    """Defines the response structure from the chat completions endpoint."""

    id: Optional[str] = "chatcmpl-mockid"
    object: Optional[str] = "chat.completion"
    created: Optional[int] = Field(default_factory=lambda: int(time.time()))
    model: str
    choices: List[ChatCompletionChoice]
